{"version":3,"sources":["navigation/styles.js","navigation/index.js","navigation/navigation.js","routes/routes.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","createStyles","list","minHeight","minWidth","display","fullList","alignSelf","listItem","justifyContent","menu","position","right","link","textDecoration","button","Navigation","withStyles","props","anchor","classes","React","useState","top","state","setState","toggleDrawer","open","event","type","key","Button","onClick","className","Drawer","onClose","clsx","role","onKeyDown","List","ListItem","to","Home","Podcast","Events","Vlog","Webinar","Media","Routes","exact","path","component","from","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e1fc6f0.chunk.js","sourcesContent":["import { createStyles } from \"@material-ui/styles\";\n\nconst styles = () =>\n  createStyles({\n    list: {\n      minHeight: 75,\n      minWidth: \"50vw\",\n      display: \"flex\",\n    },\n    fullList: {\n      display: \"flex\",\n      alignSelf: \"center\",\n    },\n    listItem: {\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n    menu: {\n      position: \"absolute\",\n      right: 50,\n    },\n    link: {\n      textDecoration: \"none\",\n    },\n    button: {\n      minWidth: 50,\n      minHeight: 50,\n    },\n  });\n\nexport default styles;\n","import Navigation from \"./navigation\";\nexport default Navigation;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst Navigation = (props) => {\n  const { classes } = props;\n  const [state, setState] = React.useState({\n    top: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx({\n        [classes.fullList]: anchor === \"top\",\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List className={classes.list}>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/home\">\n            <Button className={classes.button}>Home</Button>\n          </Link>\n        </ListItem>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/podcast\">\n            <Button className={classes.button}>Podcast</Button>\n          </Link>\n        </ListItem>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/events\">\n            <Button className={classes.button}>Events</Button>\n          </Link>\n        </ListItem>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/vlog\">\n            <Button className={classes.button}>Vlog</Button>\n          </Link>\n        </ListItem>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/webinar\">\n            <Button className={classes.button}>Webinar</Button>\n          </Link>\n        </ListItem>\n        <ListItem className={classes.listItem}>\n          <Link className={classes.link} to=\"/media\">\n            <Button className={classes.button}>Media</Button>\n          </Link>\n        </ListItem>\n      </List>\n    </div>\n  );\n  return (\n    <div>\n      <>\n        <Button onClick={toggleDrawer(\"top\", true)} className={classes.menu}>\n          <DehazeIcon />\n        </Button>\n        <Drawer\n          anchor={\"top\"}\n          open={state[\"top\"]}\n          onClose={toggleDrawer(\"top\", false)}\n        >\n          {list(\"top\")}\n        </Drawer>\n      </>\n    </div>\n  );\n};\nexport default withStyles(styles)(Navigation);\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Navigation from \"../navigation\";\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\nfunction Podcast() {\n  return <h2>Podcast</h2>;\n}\nfunction Events() {\n  return <h2>Events</h2>;\n}\nfunction Vlog() {\n  return <h2>Vlog</h2>;\n}\nfunction Webinar() {\n  return <h2>Webinar</h2>;\n}\nfunction Media() {\n  return <h2>Media</h2>;\n}\nconst Routes = () => {\n  return (\n    <>\n      <Navigation />\n      <Switch>\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/podcast\" component={Podcast} />\n        <Route exact path=\"/events\" component={Events} />\n        <Route exact path=\"/vlog\" component={Vlog} />\n        <Route exact path=\"/webinar\" component={Webinar} />\n        <Route exact path=\"/media\" component={Media} />\n        <Redirect from=\"*\" to=\"/home\" />\n      </Switch>\n    </>\n  );\n};\n\nexport default Routes;\n","import Routes from \"./routes\";\nexport default Routes;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport AppRoutes from \"./routes\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AppRoutes />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}